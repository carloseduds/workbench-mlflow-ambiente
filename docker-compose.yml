version: '3.7'

services:
  jupyter:
    user: root
    build:
      context: .
      dockerfile: ./docker/jupyter/Dockerfile
      target: ${JUPYTER_TARGET}
      args: 
        - MLFLOW_ARTIFACT_STORE=/${MLFLOW_ARTIFACT_STORE}
        - MLFLOW_VERSION=${MLFLOW_VERSION}
        - JUPYTER_BASE_IMAGE=${JUPYTER_BASE_IMAGE}
        - JUPYTER_BASE_VERSION=${JUPYTER_BASE_VERSION}
        - JUPYTER_USERNAME=${JUPYTER_USERNAME}
    image: ${IMAGE_OWNER}/${REPO_SLUG}/${JUPYTER_TARGET}:${VERSION}
    ports:
      - "${JUPYTER_PORT}:${JUPYTER_PORT}"
    depends_on: 
      - mlflow
    environment: 
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI}
      JUPYTER_ENABLE_LAB: ${JUPYTER_ENABLE_LAB}
      NB_USER: ${JUPYTER_USERNAME}
      NB_UID: ${JUPYTER_UID}
      CHOWN_HOME: "yes"
      CHOWN_HOME_OPTS: '-R'
      JUPYTER_TOKEN: "${JUPYTER_TOKEN}"
      JUPYTER_PASSWORD: "${JUPYTER_PASSWORD}"
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
    volumes:
      - ./:/home/${JUPYTER_USERNAME}/work
      - ./${DATA_DIR}:/${DATA_DIR}
      #- ./${MLFLOW_ARTIFACT_STORE}:/${MLFLOW_ARTIFACT_STORE}
    networks:
      - frontend
      - storage
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]

  mlflow:
    build:
      context: ./docker/mlflow
      args:
        - MLFLOW_VERSION=${MLFLOW_VERSION}
        - MLFLOW_ARTIFACT_STORE=${MLFLOW_ARTIFACT_STORE}
    image: ${IMAGE_OWNER}/${REPO_SLUG}/${MLFLOW_IMAGE_NAME}:${VERSION}
    expose: 
      - "${MLFLOW_TRACKING_SERVER_PORT}"
    depends_on: 
      - postgres
    environment: 
      MLFLOW_TRACKING_SERVER_HOST: ${MLFLOW_TRACKING_SERVER_HOST}
      MLFLOW_TRACKING_SERVER_PORT: ${MLFLOW_TRACKING_SERVER_PORT}
      MLFLOW_ARTIFACT_STORE: ${MLFLOW_ARTIFACT_STORE}
      MLFLOW_ARTIFACT_ROOT: ${MLFLOW_ARTIFACT_STORE}
      MLFLOW_BACKEND_STORE: ${MLFLOW_BACKEND_STORE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_PORT: ${POSTGRES_PORT}
      WAIT_FOR_IT_TIMEOUT: ${WAIT_FOR_IT_TIMEOUT}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
    #volumes:
    #  - ./${MLFLOW_ARTIFACT_STORE}:/${MLFLOW_ARTIFACT_STORE}
    networks:
      - frontend
      - backend
      - storage

  postgres:
    user: "${POSTGRES_UID}:${POSTGRES_GID}"
    build:
      context: ./docker/postgres
    restart: always
    environment: 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ./${POSTGRES_STORE}:/var/lib/postgresql/data
    networks:
      - frontend
      - backend

  minio:
    restart: always
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z-cpuv1
    container_name: minio
    expose:
      - "9000"
    ports:
      - "9000:9000"  # acesso S3/API
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
      - MINIO_SERVER_URL=${MINIO_SERVER_URL}
      - MINIO_BROWSER_REDIRECT_URL=${MINIO_BROWSER_REDIRECT_URL}
    volumes:
      - ./data/minio_data:/data
    networks:
      - storage

  create_mlflow_bucket:
    image: minio/mc:RELEASE.2025-04-08T15-39-49Z-cpuv1
    depends_on:
      - minio
    container_name: create_mlflow_bucket
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY}) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb --ignore-existing minio/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc policy set public minio/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc mb --ignore-existing minio/${DATA_REPO_BUCKET_NAME};
      /usr/bin/mc policy download minio/${DATA_REPO_BUCKET_NAME};
      exit 0;"
    networks:
      - storage

  nginx:
    restart: always
    build: ./docker/nginx
    image: mlflow_nginx
    container_name: mlflow_nginx
    ports:
      - "80:80"
      - "9001:9001"
    depends_on:
      - mlflow
      - minio
    volumes:
      - ./docker/nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - frontend
      - storage

volumes:
  minio_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  storage:
    driver: bridge
